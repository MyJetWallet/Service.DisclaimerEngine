// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Service.DisclaimerEngine.Postgres;

#nullable disable

namespace Service.DisclaimerEngine.Postgres.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("disclaimers")
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Service.DisclaimerEngine.Domain.Models.Answer", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("QuestionId")
                        .HasColumnType("text");

                    b.Property<string>("DisclaimerId")
                        .HasColumnType("text");

                    b.Property<bool>("Result")
                        .HasColumnType("boolean");

                    b.HasKey("ClientId", "QuestionId");

                    b.HasIndex("ClientId", "DisclaimerId");

                    b.ToTable("answers", "disclaimers");
                });

            modelBuilder.Entity("Service.DisclaimerEngine.Domain.Models.Disclaimer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("ShowMarketingEmailQuestion")
                        .HasColumnType("boolean");

                    b.Property<string>("TitleTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.ToTable("disclaimers", "disclaimers");
                });

            modelBuilder.Entity("Service.DisclaimerEngine.Domain.Models.DisclaimerContext", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("DisclaimerId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ClientId", "DisclaimerId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DisclaimerId");

                    b.ToTable("contexts", "disclaimers");
                });

            modelBuilder.Entity("Service.DisclaimerEngine.Domain.Models.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("DefaultState")
                        .HasColumnType("boolean");

                    b.Property<string>("DisclaimerId")
                        .HasColumnType("text");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("TextTemplateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DisclaimerId");

                    b.ToTable("questions", "disclaimers");
                });

            modelBuilder.Entity("Service.DisclaimerEngine.Domain.Models.Answer", b =>
                {
                    b.HasOne("Service.DisclaimerEngine.Domain.Models.DisclaimerContext", null)
                        .WithMany("Answers")
                        .HasForeignKey("ClientId", "DisclaimerId");
                });

            modelBuilder.Entity("Service.DisclaimerEngine.Domain.Models.Question", b =>
                {
                    b.HasOne("Service.DisclaimerEngine.Domain.Models.Disclaimer", null)
                        .WithMany("Questions")
                        .HasForeignKey("DisclaimerId");
                });

            modelBuilder.Entity("Service.DisclaimerEngine.Domain.Models.Disclaimer", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Service.DisclaimerEngine.Domain.Models.DisclaimerContext", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
